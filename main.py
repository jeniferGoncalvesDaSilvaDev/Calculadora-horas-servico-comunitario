import streamlit as st
import pandas as pd
import numpy as np
import requests
from PIL import Image
import re
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO
import xlsxwriter
import openpyxl
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from scipy import stats

OCR_SPACE_API_KEY = ''  # Se tiver, coloque aqui. Se n√£o, deixe vazio.

# Layout e t√≠tulo cyberpunk
st.set_page_config(layout="wide", page_title=" C√°lculo Horas", page_icon="üï∂Ô∏è")

# Estilo cyberpunk (usando HTML e CSS simples)
st.markdown("""
    <style>
    html, body, [class*="css"] {
        background-color: #0f0f0f !important;
        color: #00ffea !important;
        font-family: 'Courier New', monospace;
    }
    .stButton>button {
        background-color: #440099;
        color: white;
        border-radius: 10px;
    }
    .stDownloadButton>button {
        background-color: #008080;
        color: white;
    }
    .css-1offfwp {
        background-color: #1a1a1a !important;
    }
    </style>
""", unsafe_allow_html=True)

def ocr_space_api(image_bytes):
    """Envia a imagem para OCR.space e retorna o texto extra√≠do."""
    if not OCR_SPACE_API_KEY:
        # Retorna dados de exemplo para demonstra√ß√£o
        return """
        04/12/2024
        08:00 12:00 13:00 17:00
        05/12/2024  
        08:30 12:00 13:00 17:30
        06/12/2024
        09:00 12:00 13:00 18:00
        """
    
    try:
        payload = {
            'isOverlayRequired': False,
            'apikey': OCR_SPACE_API_KEY,
            'language': 'por',
        }
        files = {
            'file': ('image.png', image_bytes),
        }
        response = requests.post('https://api.ocr.space/parse/image', data=payload, files=files)
        result = response.json()
        if result['IsErroredOnProcessing']:
            return ''
        parsed_results = result.get("ParsedResults")
        if parsed_results:
            return parsed_results[0]['ParsedText']
        return ''
    except Exception as e:
        st.error(f"Erro no OCR: {str(e)}")
        return ''

def extract_data_from_image(image):
    img_byte_arr = BytesIO()
    image.save(img_byte_arr, format='PNG')
    img_bytes = img_byte_arr.getvalue()
    text = ocr_space_api(img_bytes)
    return text

def parse_time_data(text):
    date_pattern = r'\d{1,2}/\d{1,2}/\d{4}'
    time_pattern = r'\d{1,2}:\d{2}'

    dates = re.findall(date_pattern, text)
    times = re.findall(time_pattern, text)

    data = []
    for i in range(0, len(dates)):
        if i * 4 + 3 < len(times):
            entry = {
                'Data': dates[i],
                'Entrada': times[i*4],
                'In√≠cio Intervalo': times[i*4+1],
                'Fim Intervalo': times[i*4+2],
                'Sa√≠da': times[i*4+3]
            }
            data.append(entry)
    return data

def calculate_hours(row):
    try:
        entrada = pd.to_datetime(row['Entrada'], format='%H:%M', errors='coerce')
        saida = pd.to_datetime(row['Sa√≠da'], format='%H:%M', errors='coerce')
        ini_intervalo = pd.to_datetime(row['In√≠cio Intervalo'], format='%H:%M', errors='coerce')
        fim_intervalo = pd.to_datetime(row['Fim Intervalo'], format='%H:%M', errors='coerce')

        if pd.isna(entrada) or pd.isna(saida):
            return 0

        # Horas trabalhadas = (Hor√°rio de sa√≠da1 - Hor√°rio de entrada1) + (Hor√°rio de sa√≠da2 - Hor√°rio de entrada2) - (hora fim do intervalo - hora inicio do intervalo)
        # Sa√≠da1 = In√≠cio do Intervalo, Entrada1 = Entrada
        # Sa√≠da2 = Sa√≠da, Entrada2 = Fim do Intervalo
        
        if pd.notna(ini_intervalo) and pd.notna(fim_intervalo):
            periodo1 = (ini_intervalo - entrada).total_seconds() / 3600  # Manh√£
            periodo2 = (saida - fim_intervalo).total_seconds() / 3600    # Tarde
            tempo_intervalo = (fim_intervalo - ini_intervalo).total_seconds() / 3600  # Intervalo
            horas_trabalhadas = periodo1 + periodo2 - tempo_intervalo
        else:
            # Se n√£o h√° intervalo, calcula normalmente
            horas_trabalhadas = (saida - entrada).total_seconds() / 3600

        return max(0, round(horas_trabalhadas, 2))
    except:
        return 0

def process_excel_file(excel_file):
    """Processa um arquivo Excel e extrai os dados de hor√°rio"""
    try:
        # Tenta ler o arquivo Excel
        df = pd.read_excel(excel_file)
        
        # Busca por colunas que possam conter os dados necess√°rios
        data_processed = []
        
        # Mapear poss√≠veis nomes de colunas
        col_mapping = {
            'data': ['data', 'date', 'dia'],
            'entrada1': ['hor√°rio de entrada 1', 'entrada 1', 'entrada1', 'entry1'],
            'saida1': ['hor√°rio de sa√≠da 1', 'saida 1', 'saida1', 'exit1'],
            'entrada2': ['hor√°rio de entrada 2', 'entrada 2', 'entrada2', 'entry2'],
            'saida2': ['hor√°rio de sa√≠da 2', 'saida 2', 'saida2', 'exit2'],
            'entrada': ['entrada', 'entry', 'inicio', 'start'],
            'saida': ['saida', 'exit', 'fim', 'end'],
            'inicio_intervalo': ['inicio_intervalo', 'inicio intervalo', 'break_start', 'intervalo_inicio'],
            'fim_intervalo': ['fim_intervalo', 'fim intervalo', 'break_end', 'intervalo_fim']
        }
        
        # Encontrar as colunas corretas
        found_cols = {}
        for key, possible_names in col_mapping.items():
            for col in df.columns:
                if any(name.lower() in col.lower() for name in possible_names):
                    found_cols[key] = col
                    break
        
        # Verificar se √© o formato com 4 colunas (entrada1, saida1, entrada2, saida2)
        if 'entrada1' in found_cols and 'saida2' in found_cols:
            # Formato com hor√°rios separados
            for i, row in df.iterrows():
                try:
                    entrada1 = str(row[found_cols['entrada1']]).strip() if 'entrada1' in found_cols else ''
                    saida1 = str(row[found_cols.get('saida1', '')]).strip() if 'saida1' in found_cols else ''
                    entrada2 = str(row[found_cols.get('entrada2', '')]).strip() if 'entrada2' in found_cols else ''
                    saida2 = str(row[found_cols['saida2']]).strip() if 'saida2' in found_cols else ''
                    
                    # Verificar se tem dados v√°lidos
                    if entrada1 and saida2 and entrada1 != 'nan' and saida2 != 'nan':
                        data_entry = {
                            'Data': f"{i+1:02d}/12/2024",  # Data fict√≠cia
                            'Entrada': entrada1,
                            'Sa√≠da': saida2,
                            'In√≠cio Intervalo': saida1 if saida1 and saida1 != 'nan' else '',
                            'Fim Intervalo': entrada2 if entrada2 and entrada2 != 'nan' else ''
                        }
                        data_processed.append(data_entry)
                        
                except Exception as e:
                    continue
        else:
            # Formato tradicional
            # Se n√£o encontrar as colunas esperadas, assumir ordem padr√£o
            if len(found_cols) < 3:  # Pelo menos Data, Entrada e Sa√≠da
                cols = df.columns.tolist()
                if len(cols) >= 3:
                    found_cols = {
                        'data': cols[0] if len(cols) > 4 else None,
                        'entrada': cols[0] if len(cols) <= 4 else cols[1],
                        'saida': cols[-1]  # √öltima coluna como sa√≠da
                    }
                    if len(cols) >= 5:
                        found_cols['inicio_intervalo'] = cols[2]
                        found_cols['fim_intervalo'] = cols[3]
            
            # Processar os dados
            for i, row in df.iterrows():
                try:
                    if 'data' in found_cols and found_cols['data']:
                        data_val = str(row[found_cols['data']])
                    else:
                        data_val = f"{i+1:02d}/12/2024"  # Data fict√≠cia se n√£o houver coluna de data
                    
                    data_entry = {
                        'Data': data_val,
                        'Entrada': str(row[found_cols['entrada']]) if 'entrada' in found_cols else '',
                        'Sa√≠da': str(row[found_cols['saida']]) if 'saida' in found_cols else '',
                        'In√≠cio Intervalo': str(row[found_cols.get('inicio_intervalo', '')]) if 'inicio_intervalo' in found_cols else '',
                        'Fim Intervalo': str(row[found_cols.get('fim_intervalo', '')]) if 'fim_intervalo' in found_cols else ''
                    }
                    
                    # Validar se a linha tem dados v√°lidos
                    if data_entry['Entrada'] and data_entry['Sa√≠da'] and data_entry['Entrada'] != 'nan' and data_entry['Sa√≠da'] != 'nan':
                        data_processed.append(data_entry)
                        
                except Exception as e:
                    continue
                
        return data_processed
        
    except Exception as e:
        st.error(f"Erro ao processar arquivo Excel: {str(e)}")
        return []

def main():
    st.title("Controle de Horas")
    st.subheader("An√°lise OCR e Visualiza√ß√£o de Jornadas")

    st.markdown("### üìÅ Upload de Arquivos")
    
    # Op√ß√£o para escolher tipo de arquivo
    file_type = st.radio(
        "üîß Escolha o tipo de arquivo:",
        ("üì∏ Imagens (OCR)", "üìä Excel"),
        help="Selecione o tipo de arquivo que voc√™ deseja enviar"
    )
    
    if file_type == "üì∏ Imagens (OCR)":
        st.info("üí° Dica: Voc√™ pode selecionar m√∫ltiplas imagens de uma vez!")
        uploaded_files = st.file_uploader(
            "üì∏ Selecione uma ou mais imagens do formul√°rio PSC", 
            type=['jpg', 'jpeg', 'png'], 
            accept_multiple_files=True,
            help="Formatos aceitos: JPG, JPEG, PNG. Voc√™ pode selecionar m√∫ltiplos arquivos."
        )
        file_processing_type = "image"
    else:
        st.info("üí° Dica: Voc√™ pode selecionar m√∫ltiplos arquivos Excel de uma vez!")
        uploaded_files = st.file_uploader(
            "üìä Selecione um ou mais arquivos Excel com dados de hor√°rio", 
            type=['xlsx', 'xls'], 
            accept_multiple_files=True,
            help="Formatos aceitos: XLSX, XLS. Os dados devem ter colunas para Data, Entrada, Sa√≠da e opcionalmente intervalos."
        )
        file_processing_type = "excel"
    
    if uploaded_files:
        st.success(f"‚úÖ {len(uploaded_files)} arquivo(s) carregado(s) com sucesso!")

    if uploaded_files:
        all_data = []
        total_geral = 0
        
        # Barra de progresso para m√∫ltiplos arquivos
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for i, uploaded_file in enumerate(uploaded_files):
            # Atualizar progresso
            progress = (i + 1) / len(uploaded_files)
            progress_bar.progress(progress)
            status_text.text(f"Processando arquivo {i+1} de {len(uploaded_files)}: {uploaded_file.name}")
            
            if file_processing_type == "image":
                # Processamento de imagem (OCR)
                image = Image.open(uploaded_file)
                st.image(image, caption=uploaded_file.name, width=300)
                text = extract_data_from_image(image)
                raw_data = parse_time_data(text)
            else:
                # Processamento de Excel
                raw_data = process_excel_file(uploaded_file)
                st.write(f"üìä **{uploaded_file.name}** processado")

            if not raw_data:
                st.warning(f"Nenhum dado detectado em {uploaded_file.name}")
                continue

            df = pd.DataFrame(raw_data)
            df['Horas/Dia'] = df.apply(calculate_hours, axis=1)

            total = df['Horas/Dia'].sum()
            total_geral += total
            all_data.append(df)

            st.write(f"**{uploaded_file.name}** - Total: `{total:.2f}` horas üïí")
            st.dataframe(df)
        
        # Finalizar barra de progresso
        progress_bar.progress(1.0)
        status_text.text(f"‚úÖ Processamento completo! {len(uploaded_files)} arquivo(s) processado(s).")

        if all_data:
            # Processar dados automaticamente
            st.success("‚úÖ Processamento conclu√≠do! Preparando download do Excel...")
            full_df = pd.concat(all_data)
            
            # Converter data com tratamento de erro
            try:
                full_df['Data'] = pd.to_datetime(full_df['Data'], format='%d/%m/%Y', errors='coerce')
                # Remove linhas com datas inv√°lidas
                full_df = full_df.dropna(subset=['Data'])
                full_df.sort_values('Data', inplace=True)
            except Exception as e:
                st.warning(f"Erro na convers√£o de datas: {str(e)}. Usando dados sem ordena√ß√£o por data.")
                # Se n√£o conseguir converter, manter como est√°

            # Calcular estat√≠sticas DI√ÅRIAS
            media_diaria = full_df['Horas/Dia'].mean()
            desvio_diario = full_df['Horas/Dia'].std()
            # Calcular moda (valor mais frequente)
            moda_diaria = stats.mode(full_df['Horas/Dia'], keepdims=True)[0][0] if len(full_df['Horas/Dia']) > 0 else 0
            
            # Calcular estat√≠sticas SEMANAIS
            full_df['Semana'] = full_df['Data'].dt.to_period('W')
            weekly_totals = full_df.groupby('Semana')['Horas/Dia'].sum()
            media_semanal = weekly_totals.mean()
            desvio_semanal = weekly_totals.std()
            
            # Calcular total mensal
            full_df['Mes_Ano'] = full_df['Data'].dt.to_period('M')
            monthly_totals = full_df.groupby('Mes_Ano')['Horas/Dia'].sum().reset_index()
            monthly_totals['Mes_Ano'] = monthly_totals['Mes_Ano'].astype(str)
            monthly_totals_display = full_df.groupby('Mes_Ano')['Horas/Dia'].sum()
            
            # Gerar Excel automaticamente
            try:
                output = BytesIO()
                
                # Preparar DataFrame para Excel
                excel_df = full_df.copy()
                excel_df['Data'] = excel_df['Data'].dt.strftime('%d/%m/%Y')
                excel_df = excel_df.drop('Mes_Ano', axis=1, errors='ignore')
                
                # Usar pandas para criar Excel
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    # Aba Detalhes
                    excel_df.to_excel(writer, sheet_name='Detalhes', index=False)
                    
                    # Aba Resumo
                    stats_df = pd.DataFrame([
                        ['Total Geral', f"{total_geral:.2f}"],
                        ['M√©dia Di√°ria', f"{media_diaria:.2f}"],
                        ['Moda Di√°ria', f"{moda_diaria:.2f}"],
                        ['Desvio Padr√£o Di√°rio', f"{desvio_diario:.2f}"],
                        ['M√©dia Semanal', f"{media_semanal:.2f}"],
                        ['Desvio Padr√£o Semanal', f"{desvio_semanal:.2f}"]
                    ], columns=['Estat√≠stica', 'Valor'])
                    stats_df.to_excel(writer, sheet_name='Resumo', index=False)
                    
                    # Aba Totais Semanais
                    weekly_totals_df = weekly_totals.reset_index()
                    weekly_totals_df['Semana'] = weekly_totals_df['Semana'].astype(str)
                    weekly_totals_df.columns = ['Semana', 'Total Horas']
                    weekly_totals_df['Total Horas'] = weekly_totals_df['Total Horas'].round(2)
                    weekly_totals_df.to_excel(writer, sheet_name='Totais Semanais', index=False)
                    
                    # Aba Totais Mensais
                    monthly_totals_df = monthly_totals.copy()
                    monthly_totals_df.columns = ['M√™s/Ano', 'Total Horas']
                    monthly_totals_df['Total Horas'] = monthly_totals_df['Total Horas'].round(2)
                    monthly_totals_df.to_excel(writer, sheet_name='Totais Mensais', index=False)
                
                output.seek(0)
                
            except Exception as e:
                st.error(f"Erro ao gerar Excel: {str(e)}")
                output = None
            
            # Download autom√°tico
            if output:
                st.download_button(
                    label="üìä DOWNLOAD AUTOM√ÅTICO - Excel Consolidado",
                    data=output,
                    file_name="horas_psc_analise.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    type="primary"
                )

            st.subheader("üìä Visualiza√ß√µes Interativas")
            
            # Gr√°fico 1: Horas por Dia (Gr√°fico de Barras Interativo)
            st.write("üìÖ **Horas Trabalhadas por Dia**")
            st.write("*üí° Passe o mouse sobre as barras para ver detalhes. Este gr√°fico mostra sua jornada di√°ria, permitindo identificar dias com mais ou menos trabalho.*")
            try:
                dates_str = full_df['Data'].dt.strftime('%d/%m/%Y')
                fig1 = go.Figure()
                
                # Barras das horas trabalhadas
                fig1.add_trace(go.Bar(
                    x=dates_str, 
                    y=full_df['Horas/Dia'],
                    name='Horas Trabalhadas',
                    marker_color='#00ffea',
                    hovertemplate='<b>%{x}</b><br>Horas: %{y:.2f}h<extra></extra>'
                ))
                
                # Linha da m√©dia
                fig1.add_trace(go.Scatter(
                    x=dates_str,
                    y=[media_diaria] * len(dates_str),
                    mode='lines',
                    name=f'M√©dia Di√°ria ({media_diaria:.2f}h)',
                    line=dict(color='magenta', dash='dash', width=2),
                    hovertemplate='M√©dia: %{y:.2f}h<extra></extra>'
                ))
                
                # Linha da moda
                fig1.add_trace(go.Scatter(
                    x=dates_str,
                    y=[moda_diaria] * len(dates_str),
                    mode='lines',
                    name=f'Moda ({moda_diaria:.2f}h)',
                    line=dict(color='yellow', dash='dot', width=2),
                    hovertemplate='Moda: %{y:.2f}h<extra></extra>'
                ))
                
                fig1.update_layout(
                    title="Horas Trabalhadas por Dia",
                    xaxis_title="Data",
                    yaxis_title="Horas",
                    template="plotly_dark",
                    height=500,
                    showlegend=True
                )
                st.plotly_chart(fig1, use_container_width=True)
            except Exception as e:
                st.error(f"Erro no gr√°fico: {str(e)}")

            # Gr√°fico 2: Distribui√ß√£o das Horas (Histograma Interativo)
            st.write("üìà **Distribui√ß√£o das Horas Di√°rias**")
            st.write("*üí° Este histograma mostra com que frequ√™ncia voc√™ trabalha determinadas quantidades de horas. Picos indicam suas jornadas mais comuns.*")
            try:
                fig2 = go.Figure()
                
                # Histograma
                fig2.add_trace(go.Histogram(
                    x=full_df['Horas/Dia'],
                    nbinsx=15,
                    name='Frequ√™ncia',
                    marker_color='lime',
                    opacity=0.7,
                    hovertemplate='Horas: %{x:.1f}-%{x:.1f}<br>Frequ√™ncia: %{y}<extra></extra>'
                ))
                
                # Linha da m√©dia
                fig2.add_vline(
                    x=media_diaria, 
                    line_dash="dash", 
                    line_color="cyan",
                    annotation_text=f"M√©dia: {media_diaria:.2f}h",
                    annotation_position="top"
                )
                
                # Linha da moda
                fig2.add_vline(
                    x=moda_diaria, 
                    line_dash="dot", 
                    line_color="yellow",
                    annotation_text=f"Moda: {moda_diaria:.2f}h",
                    annotation_position="bottom"
                )
                
                # √Årea do desvio padr√£o
                fig2.add_vrect(
                    x0=media_diaria - desvio_diario,
                    x1=media_diaria + desvio_diario,
                    fillcolor="orange",
                    opacity=0.2,
                    annotation_text="¬±1 Desvio Padr√£o",
                    annotation_position="top right"
                )
                
                fig2.update_layout(
                    title="Distribui√ß√£o das Horas Trabalhadas",
                    xaxis_title="Horas por Dia",
                    yaxis_title="Frequ√™ncia (Quantos Dias)",
                    template="plotly_dark",
                    height=500,
                    showlegend=False
                )
                st.plotly_chart(fig2, use_container_width=True)
            except Exception as e:
                st.error(f"Erro no gr√°fico: {str(e)}")

            # Gr√°fico 3: Totais Semanais (Gr√°fico de Barras Interativo)
            st.write("üìÖ **Totais Semanais**")
            st.write("*üí° Visualize suas horas semanais totais. Ajuda a identificar semanas mais intensas e padr√µes semanais de trabalho.*")
            try:
                week_labels = [str(w) for w in weekly_totals.index]
                fig3 = go.Figure()
                
                # Barras semanais
                fig3.add_trace(go.Bar(
                    x=week_labels,
                    y=weekly_totals.values,
                    name='Horas Semanais',
                    marker_color='#ffaa00',
                    hovertemplate='<b>Semana %{x}</b><br>Total: %{y:.2f}h<extra></extra>'
                ))
                
                # Linha da m√©dia semanal
                fig3.add_trace(go.Scatter(
                    x=week_labels,
                    y=[media_semanal] * len(week_labels),
                    mode='lines',
                    name=f'M√©dia Semanal ({media_semanal:.2f}h)',
                    line=dict(color='cyan', dash='dash', width=2),
                    hovertemplate='M√©dia Semanal: %{y:.2f}h<extra></extra>'
                ))
                
                fig3.update_layout(
                    title="Horas Trabalhadas por Semana",
                    xaxis_title="Semana",
                    yaxis_title="Total de Horas",
                    template="plotly_dark",
                    height=500,
                    showlegend=True
                )
                st.plotly_chart(fig3, use_container_width=True)
            except Exception as e:
                st.error(f"Erro no gr√°fico semanal: {str(e)}")

            st.subheader("üìö Estat√≠sticas Explicadas")

            st.markdown(f"""
            ### üìä Estat√≠sticas Di√°rias:
            - **Total Geral:** `{total_geral:.2f}` horas
            - **M√©dia di√°ria:** `{media_diaria:.2f}` horas  
              üìà A m√©dia √© o valor m√©dio de horas que voc√™ trabalhou por dia. √â a soma de todas as horas dividida pelo n√∫mero de dias.
            - **Moda di√°ria:** `{moda_diaria:.2f}` horas  
              üéØ A moda √© o valor de horas que voc√™ mais trabalhou (mais frequente). Indica sua jornada t√≠pica.
            - **Desvio padr√£o di√°rio:** `{desvio_diario:.2f}` horas  
              üìä O desvio padr√£o mostra a variabilidade das suas horas di√°rias. Quanto menor, mais consistente √© sua rotina.
              - Se ‚â§ 1h: Rotina muito consistente üü¢
              - Se 1-2h: Rotina moderadamente vari√°vel üü°  
              - Se > 2h: Rotina muito vari√°vel üî¥
              
            ### üìÖ Estat√≠sticas Semanais:
            - **M√©dia semanal:** `{media_semanal:.2f}` horas  
              üìà A m√©dia de horas trabalhadas por semana completa.
            - **Desvio padr√£o semanal:** `{desvio_semanal:.2f}` horas  
              üìä Mostra a varia√ß√£o das horas semanais. Quanto maior, mais irregular √© sua carga de trabalho semanal.
              
            ### üîç Como Interpretar os Gr√°ficos:
            - **Gr√°fico de Barras Di√°rio:** Cada barra representa um dia. Barras altas = dias intensos.
            - **Histograma:** Mostra quantos dias voc√™ trabalhou X horas. Picos = suas jornadas mais comuns.
            - **Gr√°fico Semanal:** Compare semanas inteiras. √ötil para identificar per√≠odos mais intensos.
            """)
            
            st.subheader("üìÖ Totais por Semana")
            for semana, total_semana in weekly_totals.items():
                st.write(f"**Semana {semana}:** `{total_semana:.2f}` horas")
                
            st.subheader("üìÖ Totais por M√™s")
            for mes, total_mes in monthly_totals_display.items():
                st.write(f"**{mes}:** `{total_mes:.2f}` horas")

if __name__ == "__main__":
    main()